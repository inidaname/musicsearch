{
  "_args": [
    [
      {
        "raw": "postcss-assets",
        "scope": null,
        "escapedName": "postcss-assets",
        "name": "postcss-assets",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/asmausani/WebApps/MusicSearch"
    ]
  ],
  "_from": "postcss-assets@latest",
  "_id": "postcss-assets@4.1.0",
  "_inCache": true,
  "_location": "/postcss-assets",
  "_nodeVersion": "0.12.7",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/postcss-assets-4.1.0.tgz_1461528542681_0.861119500361383"
  },
  "_npmUser": {
    "name": "borodean",
    "email": "borodean@gmail.com"
  },
  "_npmVersion": "2.11.3",
  "_phantomChildren": {
    "chalk": "1.1.3",
    "js-base64": "2.1.9",
    "source-map": "0.5.6",
    "supports-color": "3.2.3"
  },
  "_requested": {
    "raw": "postcss-assets",
    "scope": null,
    "escapedName": "postcss-assets",
    "name": "postcss-assets",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-assets/-/postcss-assets-4.1.0.tgz",
  "_shasum": "341f30d6ac0fbb314d82a28cc1ea753a986ffed7",
  "_shrinkwrap": null,
  "_spec": "postcss-assets",
  "_where": "/Users/asmausani/WebApps/MusicSearch",
  "author": {
    "name": "Vadym Borodin",
    "email": "borodean@gmail.com",
    "url": "http://borodean.com"
  },
  "bugs": {
    "url": "https://github.com/assetsjs/postcss-assets/issues"
  },
  "contributors": [
    {
      "name": "Alexey Plutalov",
      "email": "demiazz.py@gmail.com",
      "url": "https://twitter.com/demiazz"
    },
    {
      "name": "Andrey Sitnik",
      "email": "andrey@sitnik.ru",
      "url": "http://sitnik.ru"
    },
    {
      "name": "Dave Clayton",
      "email": "davedx@gmail.com",
      "url": "http://www.dave78.com"
    },
    {
      "name": "Ivan Vlasenko",
      "url": "https://github.com/avanes"
    },
    {
      "name": "Pascal Duez",
      "url": "http://pascalduez.me"
    }
  ],
  "dependencies": {
    "assets": "^2.0.0",
    "postcss": "^5.0.12",
    "postcss-functions": "^2.1.0"
  },
  "description": "PostCSS plugin to manage assets",
  "devDependencies": {
    "ava": "^0.13.0",
    "eslint": "^2.5.3",
    "eslint-config-airbnb": "^6.2.0",
    "nyc": "^6.1.1"
  },
  "directories": {},
  "dist": {
    "shasum": "341f30d6ac0fbb314d82a28cc1ea753a986ffed7",
    "tarball": "https://registry.npmjs.org/postcss-assets/-/postcss-assets-4.1.0.tgz"
  },
  "gitHead": "5e739f6defb035a5089699e40dfae45e8091c00f",
  "homepage": "https://github.com/assetsjs/postcss-assets#readme",
  "keywords": [
    "assets",
    "base64",
    "css",
    "image",
    "path",
    "postcss",
    "postcss-plugin",
    "size",
    "url"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "borodean",
      "email": "borodean@gmail.com"
    }
  ],
  "name": "postcss-assets",
  "optionalDependencies": {},
  "readme": "<h1 align=\"center\">\r\n  <img src=\"https://rawgit.com/assetsjs/assets/develop/media/logo.svg\" alt=\"assets\">\r\n</h1>\r\n\r\nPostCSS Assets is an asset manager for CSS. It isolates stylesheets from environmental changes, gets image sizes and inlines files.\r\n\r\n[![Unix Build Status][travis-badge]][travis] [![Windows Build Status][appveyor-badge]][appveyor] [![Coverage][coveralls-badge]][coveralls]\r\n\r\n[appveyor]:        https://ci.appveyor.com/project/borodean/postcss-assets\r\n[appveyor-badge]:  https://img.shields.io/appveyor/ci/borodean/postcss-assets.svg?label=windows\r\n[coveralls]:       https://coveralls.io/github/assetsjs/postcss-assets\r\n[coveralls-badge]: https://img.shields.io/coveralls/assetsjs/postcss-assets.svg\r\n[travis]:          https://travis-ci.org/assetsjs/postcss-assets\r\n[travis-badge]:    https://img.shields.io/travis/assetsjs/postcss-assets.svg?label=unix\r\n\r\nTable of contents\r\n-----------------\r\n\r\n* [Installation](#installation)\r\n* [Usage](#usage)\r\n* [URL resolution](#url-resolution)\r\n  * [Load paths](#load-paths)\r\n  * [Base path](#base-path)\r\n  * [Base URL](#base-url)\r\n  * [Relative paths](#relative-paths)\r\n* [Cachebuster](#cachebuster)\r\n* [Image dimensions](#image-dimensions)\r\n* [Inlining files](#inlining-files)\r\n* [Full list of options](#full-list-of-options)\r\n\r\nInstallation\r\n------------\r\n\r\n```bash\r\nnpm install postcss-assets --save-dev\r\n```\r\n\r\nUsage\r\n-----\r\n\r\n### [Gulp PostCSS](https://github.com/w0rm/gulp-postcss)\r\n\r\n```js\r\ngulp.task('assets', function () {\r\n  var postcss = require('gulp-postcss');\r\n  var assets  = require('postcss-assets');\r\n\r\n  return gulp.src('source/*.css')\r\n    .pipe(postcss([assets({\r\n      loadPaths: ['images/']\r\n    })]))\r\n    .pipe(gulp.dest('build/'));\r\n});\r\n```\r\n\r\n### [Grunt PostCSS](https://github.com/nDmitry/grunt-postcss)\r\n\r\n```js\r\nvar assets  = require('postcss-assets');\r\n\r\ngrunt.initConfig({\r\n  postcss: {\r\n    options: {\r\n      processors: [\r\n        assets({\r\n          loadPaths: ['images/']\r\n        })\r\n      ]\r\n    },\r\n    dist: { src: 'build/*.css' }\r\n  },\r\n});\r\n```\r\n\r\n**Note: all of the listed options below are parameters for the ```assets``` object, not the top level postcss options object.**\r\n\r\nURL resolution\r\n--------------\r\n\r\nThese options isolate stylesheets from environmental changes.\r\n\r\n### Load paths\r\n\r\nTo make PostCSS Assets search for files in specific directories, define load paths:\r\n\r\n```js\r\nvar options = {\r\n  loadPaths: ['fonts/', 'media/patterns/', 'images/']\r\n};\r\n```\r\n\r\nExample:\r\n\r\n```css\r\nbody {\r\n  background: resolve('foobar.jpg');\r\n  background: resolve('icons/baz.png');\r\n}\r\n```\r\n\r\nPostCSS Assets would look for the files relative to the source file, then in load paths, then in the base path. If it succeed, it would resolve a true URL:\r\n\r\n```css\r\nbody {\r\n  background: url('/media/patterns/foobar.jpg');\r\n  background: url('/images/icons/baz.png');\r\n}\r\n```\r\n\r\n### Base path\r\n\r\nIf the root directory of your site is not where you execute PostCSS Assets, correct it:\r\n\r\n```js\r\nvar options = {\r\n  basePath: 'source/'\r\n};\r\n```\r\n\r\nPostCSS Assets would treat `source` directory as `/` for all URLs and load paths would be relative to it.\r\n\r\n### Base URL\r\n\r\nIf the URL of your base path is not `/`, correct it:\r\n\r\n```js\r\nvar options = {\r\n  baseUrl: 'http://example.com/wp-content/themes/'\r\n};\r\n```\r\n\r\n### Relative paths\r\n\r\nTo make resolved paths relative to the input file, set a flag:\r\n\r\n```js\r\nvar options = {\r\n  relative: true\r\n};\r\n```\r\n\r\nTo relate to a particular directory, set it as a string:\r\n\r\n```js\r\nvar options = {\r\n  relative: 'assets/css'\r\n};\r\n```\r\n\r\nCachebuster\r\n-----------\r\n\r\nPostCSS Assets can bust assets cache, changing urls depending on assetâ€™s modification date:\r\n\r\n```js\r\nvar options = {\r\n  cachebuster: true\r\n};\r\n```\r\n\r\n```css\r\nbody {\r\n  background: url('/images/icons/baz.png?14a931c501f');\r\n}\r\n```\r\n\r\nTo define a custom cachebuster pass a function as an option:\r\n\r\n```js\r\nvar options = {\r\n  cachebuster: function (filePath, urlPathname) {\r\n    return fs.statSync(filePath).mtime.getTime().toString(16);\r\n  }\r\n};\r\n```\r\n\r\nIf the returned value is falsy, no cache busting is done for the asset.\r\n\r\nIf the returned value is an object the values of `pathname` and/or `query` are used to generate a cache busted path to the asset.\r\n\r\nIf the returned value is a string, it is added as a query string.\r\n\r\nThe returned values for query strings must not include the starting `?`.\r\n\r\nBusting the cache via path:\r\n\r\n```js\r\nvar options = {\r\n  cachebuster: function (filePath, urlPathname) {\r\n    var hash = fs.statSync(filePath).mtime.getTime().toString(16);\r\n    return {\r\n      pathname: path.dirname(urlPathname)\r\n        + '/' + path.basename(urlPathname, path.extname(urlPathname))\r\n        + hash + path.extname(urlPathname),\r\n      query: false // you may omit this one\r\n    }\r\n  }\r\n};\r\n```\r\n\r\nImage dimensions\r\n----------------\r\n\r\nPostCSS Assets calculates dimensions of PNG, JPEG, GIF, SVG and WebP images:\r\n\r\n```css\r\nbody {\r\n  width: width('images/foobar.png'); /* 320px */\r\n  height: height('images/foobar.png'); /* 240px */\r\n  background-size: size('images/foobar.png'); /* 320px 240px */\r\n}\r\n```\r\n\r\nTo correct the dimensions for images with a high density, pass it as a second parameter:\r\n\r\n```css\r\nbody {\r\n  width: width('images/foobar.png', 2); /* 160px */\r\n  height: height('images/foobar.png', 2); /* 120px */\r\n  background-size: size('images/foobar.png', 2); /* 160px 120px */\r\n}\r\n```\r\n\r\nInlining files\r\n--------------\r\n\r\nPostCSS inlines files to a stylesheet in Base64 encoding:\r\n\r\n```css\r\nbody {\r\n  background: inline('images/foobar.png');\r\n}\r\n```\r\n\r\nSVG files would be inlined unencoded, because [then they benefit in size](http://css-tricks.com/probably-dont-base64-svg/).\r\n\r\nFull list of options\r\n--------------------\r\n\r\n| Option           | Description                                                                       | Default |\r\n|:-----------------|:----------------------------------------------------------------------------------|:--------|\r\n| `basePath`       | Root directory of the project.                                                    | `.`     |\r\n| `baseUrl`        | URL of the project when running the web server.                                   | `/`     |\r\n| `cachebuster`    | If cache should be busted. Pass a function to define custom busting strategy.     | `false` |\r\n| `loadPaths`      | Specific directories to look for the files.                                       | `[]`    |\r\n| `relative`       | Directory to relate to when resolving URLs. When `true`, relates to the input file. When `false`, disables relative URLs. | `false` |\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assetsjs/postcss-assets.git"
  },
  "scripts": {
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "test": "eslint --ignore-path .gitignore . && nyc --reporter=text --reporter=html ./node_modules/ava/cli.js"
  },
  "version": "4.1.0"
}
