{
  "_args": [
    [
      {
        "raw": "assets@^2.0.0",
        "scope": null,
        "escapedName": "assets",
        "name": "assets",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Users/asmausani/WebApps/MusicSearch/node_modules/postcss-assets"
    ]
  ],
  "_from": "assets@>=2.0.0 <3.0.0",
  "_id": "assets@2.1.0",
  "_inCache": true,
  "_location": "/assets",
  "_nodeVersion": "4.2.2",
  "_npmUser": {
    "name": "borodean",
    "email": "borodean@gmail.com"
  },
  "_npmVersion": "2.14.7",
  "_phantomChildren": {
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "minimatch": "3.0.4",
    "once": "1.3.3",
    "path-is-absolute": "1.0.1"
  },
  "_requested": {
    "raw": "assets@^2.0.0",
    "scope": null,
    "escapedName": "assets",
    "name": "assets",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/postcss-assets"
  ],
  "_resolved": "https://registry.npmjs.org/assets/-/assets-2.1.0.tgz",
  "_shasum": "bfae98717974d66636eed26b18eb7120608816f5",
  "_shrinkwrap": null,
  "_spec": "assets@^2.0.0",
  "_where": "/Users/asmausani/WebApps/MusicSearch/node_modules/postcss-assets",
  "author": {
    "name": "Vadym Borodin",
    "email": "borodean@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/borodean/assets/issues"
  },
  "dependencies": {
    "async": "^1.5.0",
    "bluebird": "^3.0.6",
    "calipers": "^2.0.0",
    "calipers-gif": "^2.0.0",
    "calipers-jpeg": "^2.0.0",
    "calipers-png": "^2.0.0",
    "calipers-svg": "^2.0.0",
    "calipers-webp": "^2.0.0",
    "glob": "^6.0.4",
    "lodash": "^3.10.1",
    "mime": "^1.3.4"
  },
  "description": "An asset manager for node",
  "devDependencies": {
    "ava": "^0.7.0",
    "coveralls": "^2.11.4",
    "eslint": "^1.10.3",
    "nyc": "^4.0.1",
    "sinon": "^1.17.2"
  },
  "directories": {},
  "dist": {
    "shasum": "bfae98717974d66636eed26b18eb7120608816f5",
    "tarball": "https://registry.npmjs.org/assets/-/assets-2.1.0.tgz"
  },
  "gitHead": "9a3354426f951919a984da219db2169903e45677",
  "homepage": "https://github.com/borodean/assets#readme",
  "keywords": [
    "assets",
    "base64",
    "image",
    "path",
    "size",
    "url"
  ],
  "main": "./lib",
  "maintainers": [
    {
      "name": "borodean",
      "email": "borodean@gmail.com"
    }
  ],
  "name": "assets",
  "optionalDependencies": {},
  "readme": "<h1 align=\"center\">\n  <img src=\"https://rawgit.com/assetsjs/assets/develop/media/logo.svg\" alt=\"assets\">\n</h1>\n\nAssets is an asset manager for node. It isolates assets from environmental changes, gets generates their URLs, retrieves image sizes and base64-encodes them.\n\n[![Unix Build Status][travis-badge]][travis] [![Windows Build Status][appveyor-badge]][appveyor] [![Coverage][coveralls-badge]][coveralls]\n\n[appveyor]:        https://ci.appveyor.com/project/borodean/assets\n[appveyor-badge]:  https://img.shields.io/appveyor/ci/borodean/assets.svg?label=windows\n[coveralls]:       https://coveralls.io/github/borodean/assets\n[coveralls-badge]: https://img.shields.io/coveralls/borodean/assets.svg\n[travis]:          https://travis-ci.org/borodean/assets\n[travis-badge]:    https://img.shields.io/travis/borodean/assets.svg?label=unix\n\n## Installation\n\n```bash\nnpm install assets --save\n```\n\n## Usage\n\nAn instance of Assets should be created:\n\n```js\nvar options = { loadPaths: ['fonts', 'images'] };\nvar resolver = new Assets(options);\n```\n\nEach of the resolving methods returns a Promise:\n\n```js\nresolver.path('foobar.jpg')\n  .then(function (resolvedPath) {\n    // ....\n  });\n```\n\nTo use a node-style callback, pass it as the last argument to the resolving method:\n\n```js\nresolver.path('foobar.jpg', function (err, resolvedPath) {\n  // ...\n});\n```\n\n## Resolving methods\n\n### `.path(path)`\nResolve the absolute path for an asset.\n\n```js\nvar resolver = new Assets({ loadPaths: ['assets'] });\nresolver.path('patterns/knitwork.gif')\n  .then(function (resolvedPath) {\n    console.log(resolvedPath); // '/var/www/example.com/assets/patterns/knitwork.gif'\n  });\n```\n\n### `.url(path)`\nGenerates an URL for an asset.\n\n```js\nvar resolver = new Assets({ loadPaths: ['assets/images'] });\nresolver.url('page/background.jpg')\n  .then(function (resolvedUrl) {\n    console.log(resolvedUrl); // '/assets/images/page/background.jpg'\n  });\n```\n\n### `.data(path)`\nReturns a base64-encoded content of an asset. SVG files would be non-encoded, because then [they benefit in size](http://css-tricks.com/probably-dont-base64-svg/).\n\n```js\nvar resolver = new Assets();\nresolver.data('icons/sabre.png')\n  .then(function (resolvedData) {\n    console.log(resolvedData); // 'data:image/png;base64,...'\n  });\n```\n\n### `.size(path)`\nReturn the size of an asset.\n\n```js\nvar resolver = new Assets();\nresolver.size('logo.png')\n  .then(function (resolvedSize) {\n    console.log(resolvedSize); // '{ width: 132, height: 48 }'\n  });\n```\n\nOptions\n-------\n\nOptions are set by passing an options object to the constructor. Available options are:\n\n### `basePath`\nThe path to the root of the project.\n\nFor example: `\"source/\"`.\n\nDefaults to the current working directory.\n\n### `baseUrl`\nURL of the project when running withing the web server.\n\nFor example: `\"/wp-content/themes/twentyfourteen\"`, `\"http://example.com\"`.\n\nDefaults to `\"/\"`.\n\n### `cachebuster`\nIf cache should be busted. If set to `true`, Assets will bust assets cache, changing urls depending on assetâ€™s modification date:\n\n```js\nvar resolver = new Assets({ cachebuster: true, loadPaths: ['assets/images'] });\nresolver.url('page/background.jpg')\n  .then(function (resolvedUrl) {\n    console.log(resolvedUrl); // '/assets/images/page/background.jpg?14a931c501f'\n  });\n```\n\nTo define a custom cachebuster pass a function as an option:\n\n```js\nvar resolver = new Assets({\n  cachebuster: function (resolvedPath, pathname) {\n    return fs.statSync(resolvedPath).mtime.getTime().toString(16);\n  }\n});\n```\n\nIf the returned value is falsy, no cache busting is done for the asset.\n\nIf the returned value is an object the values of pathname and/or query are used to generate a cache busted path to the asset.\n\nIf the returned value is a string, it is added as a query string.\n\nThe returned values for query strings must not include the starting ?.\n\nBusting the cache via path:\n\n```js\nvar resolver = new Assets({\n  cachebuster: function (resolvedPath, pathname) {\n    var hash = fs.statSync(resolvedPath).mtime.getTime().toString(16);\n    return {\n      pathname: path.dirname(pathname)\n        + '/' + path.basename(pathname, path.extname(pathname))\n        + hash + path.extname(pathname),\n      query: false // you may omit this one\n    }\n  }\n});\n```\n\nDefaults to `false`.\n\n### `loadPaths`\nSpecific directories to look for the files.\n\nFor example: `[\"assets/fonts\", \"assets/images\"]`.\n\nDefaults to an empty array.\n\n### `relativeTo`\nDirectory to relate to when resolving URLs. When `false`, disables relative URLs.\n\nFor example: `\"assets/css\"`.\n\nDefaults to `false`.\n\nPath resolution\n---------------\n\nAssets provide a file path resolution algorithm similar to the one used by desktop file systems.\n\nThis may come in handy when you have different directories for different types of assets, e.g. images, fonts. You add those to the list of load paths when configuring Assets:\n\n```js\nvar resolver = new Assets({\n  loadPaths: ['assets/fonts', 'assets/images']\n});\n```\n\nNow, instead of writing this:\n\n```js\nvar url = '/assets/images/icons/create.png';\nvar url = '/assets/images/icons/read.png';\nvar url = '/assets/images/icons/update.png';\nvar url = '/assets/images/icons/delete.png';\n```\n\nYou can write this:\n\n```js\nvar url = resolver.path('icons/create.png');\nvar url = resolver.path('icons/read.png');\nvar url = resolver.path('icons/update.png');\nvar url = resolver.path('icons/delete.png');\n```\n\nApart from the fact that these lines are just shorter, it gives you an opportunity to easily change the environment and the way the URLs are being output much quicker.\n\nFor instance, if you move all the images from `assets/images` to `client/source/images` you wouldn't need to go through all of your stylesheets to replace the URLs, you would just need to edit the corresponding parameter inside your Assets config:\n\n```js\nvar resolver = new Assets({\n  loadPaths: ['assets/fonts', 'client/source/images']\n});\n```\n\nWhen resolving a path, Assets would look for it through every of the following paths in the listed order:\n\n* load paths;\n* base path.\n\nPath resolution also gives an opportunity to easily change the URL structure when the directory structure of the project on your computer is not exactly the same as it would be on the server.\n\nFor instance, if you have a Wordpress theme project, you may want to append `/wp-content/themes/your-theme-name` to every URL inside of your stylesheet. This is done by providing a `baseUrl` parameter to Assets config:\n\n```js\nvar resolver = new Assets({\n  baseUrl: '/wp-content/themes/your-theme-name'\n});\n```\n\nNow everything would be resolved relative to that base URL:\n\n```js\nresolver.url('images/create.png')\n  .then(function (resolvedUrl) {\n    console.log(resolvedUrl); // '/wp-content/themes/your-theme-name/images/create.png'\n  });\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/borodean/assets.git"
  },
  "scripts": {
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "test": "eslint --ignore-path .gitignore . && nyc --reporter=text --reporter=html ./node_modules/ava/cli.js"
  },
  "version": "2.1.0"
}
